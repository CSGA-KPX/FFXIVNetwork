// 在 http://fsharp.org 上了解有关 F# 的详细信息。请参见“F# 教程”项目
// 获取有关 F# 编程的更多指导。
#r @"Z:\KPX\Documents\Visual Studio 2017\Projects\FFXIVNetwork\packages\NLog.4.4.10\lib\net45\NLog.dll"
#load "Utils.fs"
#load "Constants.fs"
#load "GeneralPacket.fs"
#load "SpecializedPacket.fs"
//#load "DevUtils.fs"

open System
open System.IO
open LibFFXIV.GeneralPacket
open LibFFXIV.SpecializedPacket
open LibFFXIV.Utils


let PacketHandler (bytes : byte []) = 
    let packet = FFXIVBasePacket.ParseFromBytes(bytes)
    for sp in packet.SubPackets do
        if sp.Type = 0x0003us then
            let gp = FFXIVGamePacket.ParseFromBytes(sp.Data)
            let OpHex = HexString.ToHex(BitConverter.GetBytes(gp.Opcode))
            printfn "OP:%s Data:%s" (OpHex) (HexString.ToHex(gp.Data))


let LowPacketLog () = 
    let path = @"Z:\KPX\Documents\Visual Studio 2017\Projects\FFXIVNetwork\FFXIVNetwork\bin\Debug\LoggingLowPacket.txt"
    File.ReadAllLines(path)
    |> Array.filter (fun x -> x.ToUpper().StartsWith(LibFFXIV.Constants.FFXIVBasePacketMagic))
    |> Array.map (fun x -> HexString.ToBytes(x))

//LowPacketLog
//|> Array.iter (fun x -> PacketHandler(x))
// 在此处定义库脚本代码


let hex
let hex2= "5252A041FF5D46E27F2A644D7B99C4753882B2905C0100005E000000000001000101000000000000789CB3606060F8F691C181ED1DA3003343FD0B11062746060631069E49D6914029063620CE0963150061062830EC65600000395508E0"
let bytes = hex2 |> HexString.ToBytes

let packetSize = FFXIVBasePacket.GetPacketSize(bytes)


let rec yieldPacket (rest) = 
    let rst = FFXIVBasePacket.TakePacket(rest)
    if rst.IsNone then
        rest
    else
        let (p, rst) = rst.Value
        printfn "%A" (FFXIVBasePacket.ParseFromBytes(p))
        yieldPacket(rst)
let rst = yieldPacket(bytes)
if rst.Length <> 0 then
    rst |> HexString.ToHex |> printfn "%s"